{"version":3,"sources":["history.js","lib/security/authorization.service.js","env.js","context/userContext.js","components/ErrorComponent/ErrorComponent.jsx","pages/login/login.jsx","pages/confirm/Confirm.jsx","pages/dashboard/dashboard.jsx","components/router/privateRoute.jsx","pages/404.jsx","pages/signup/SignUp.jsx","App.js","serviceWorker.js","index.js"],"names":["createBrowserHistory","AuthorizationService","authCfg","awsConfig","this","userPool","CognitoUserPool","UserPoolId","userPoolId","ClientId","clientId","registerData","Promise","resolve","onError","signUp","email","password","CognitoUserAttribute","fullName","err","result","confirmRequest","CognitoUser","Username","username","Pool","confirmRegistration","confirmationCode","loginRequest","authenticateUser","AuthenticationDetails","Password","onSuccess","credentials","CognitoIdentityCredentials","IdentityPoolId","identityPoolId","Logins","credentialName","getIdToken","getJwtToken","refresh","error","console","log","onFailure","res","cognitoUser","getCurrentUser","getSession","getUserAttributes","attributes","reduce","profile","item","Name","Value","UserContext","React","createContext","isAuth","toggleAuth","UserContextProvider","Provider","ErrorComponent","message","className","AWS","config","region","auth","LoginSchema","yup","shape","required","min","Login","_","setAuth","useContext","useState","wentWrong","useForm","validationSchema","register","handleSubmit","errors","submitLogin","login","then","refreshSession","user","history","push","catch","onSubmit","form","name","type","ref","id","data-testid","String","onKeyPress","e","which","SignupSchema","code","Confirm","submitConfirm","confirmAccount","setWentWrong","fileName","setFileName","files","setFiles","fileRef","useRef","onClick","params","Bucket","MaxKeys","S3","listObjects","data","Contents","map","el","Key","current","forEach","file","i","userId","identityId","Body","fail","putObject","uploadToS3","key","getSignedUrl","getSignedURL","finally","value","onChange","length","htmlFor","photos","getAccessToken","token","fetch","method","headers","body","JSON","stringify","PrivateRoute","props","useEffect","NotFound","SignUp","submitSignUp","registerRequest","registerUser","App","setAuthorization","path","component","Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.29d96fc9.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();\r\n","import {\r\n    CognitoUserPool,\r\n    CognitoUserAttribute,\r\n    CognitoUser,\r\n    AuthenticationDetails,\r\n} from 'amazon-cognito-identity-js'\r\nimport {CognitoIdentityCredentials} from 'aws-sdk/global';\r\n\r\nexport class AuthorizationService {\r\n    constructor(authCfg, awsConfig) {\r\n        this.userPool = new CognitoUserPool({\r\n            UserPoolId: authCfg.userPoolId,\r\n            ClientId: authCfg.clientId\r\n        })\r\n\r\n        this.awsConfig = awsConfig;\r\n        this.authCfg = authCfg;\r\n    }\r\n    \r\n    registerUser(registerData) {\r\n        return new Promise((resolve, onError) => {\r\n            this.userPool.signUp(\r\n                registerData.email,\r\n                registerData.password,\r\n                [\r\n                    new CognitoUserAttribute({\r\n                        'Name': 'website',\r\n                        'Value': 'jkan.pl'\r\n                    }),\r\n                    new CognitoUserAttribute({\r\n                        'Name': 'nickname',\r\n                        'Value': registerData.fullName\r\n                    })\r\n                ],\r\n                null,\r\n                (err, result) => {\r\n                    if (err) {\r\n                        onError(err);\r\n                    }\r\n                    resolve(result);\r\n                }\r\n            )\r\n    })\r\n}\r\n\r\n    confirmAccount(confirmRequest) {\r\n        return new Promise((resolve, onError) => {\r\n            const cognitoUser = new CognitoUser({\r\n                Username: confirmRequest.username,\r\n                Pool: this.userPool\r\n            })\r\n            \r\n            cognitoUser.confirmRegistration(\r\n                confirmRequest.confirmationCode,\r\n                true,\r\n                (err, result) => {\r\n                    if (err) {\r\n                        onError(err);\r\n                        return;\r\n                    }\r\n                    resolve(result);\r\n                }\r\n            ) \r\n        });\r\n    }\r\n    \r\n    login(loginRequest) {\r\n        return new Promise((resolve, onError) => {\r\n            const cognitoUser = new CognitoUser({\r\n                Username: loginRequest.username,\r\n                Pool: this.userPool\r\n            })\r\n        \r\n            cognitoUser.authenticateUser(\r\n                new AuthenticationDetails({\r\n                    Username: loginRequest.username,\r\n                    Password: loginRequest.password\r\n                }),\r\n                {\r\n                    onSuccess: (result) => {\r\n                        this.awsConfig.credentials = new CognitoIdentityCredentials({\r\n                            IdentityPoolId: this.authCfg.identityPoolId,\r\n                            Logins: {\r\n                                [this.authCfg.credentialName]: result.getIdToken().getJwtToken()\r\n                            }\r\n                        });\r\n                        \r\n                        this.awsConfig.credentials.refresh((error) => {\r\n                \t\t\tif (error) {\r\n                \t\t\t\tconsole.error(error);\r\n                \t\t\t} else {\r\n                \t\t\t\tconsole.log('Successfully logged!');\r\n                \t\t\t}\r\n            \t\t    });\r\n                        \r\n                        resolve(result);\r\n                    },\r\n                    onFailure: (err) => onError(err)\r\n                }\r\n            )\r\n        });\r\n    }\r\n    \r\n    getAccessToken() {\r\n        return new Promise((res, error) => {\r\n            const cognitoUser = this.userPool.getCurrentUser();\r\n            \r\n            if (cognitoUser == null) {\r\n                error('user not authorized')\r\n            }\r\n            \r\n            cognitoUser.getSession((err, result) => {\r\n                if (err) {\r\n                    error(err);\r\n                }\r\n                \r\n                res(result.getIdToken().getJwtToken());\r\n            })\r\n        })\r\n    }\r\n    \r\n    refreshSession() {\r\n        return new Promise((res, error) => {\r\n            const cognitoUser = this.userPool.getCurrentUser();\r\n            \r\n            if (cognitoUser == null) {\r\n                error('user not authorized')\r\n            }\r\n            \r\n            cognitoUser.getSession((err, result) => {\r\n                if (err) {\r\n                    error(err);\r\n                }\r\n                \r\n                this.awsConfig.credentials = new CognitoIdentityCredentials({\r\n                    IdentityPoolId: this.authCfg.identityPoolId,\r\n                    Logins: {\r\n                        [this.authCfg.credentialName]: result.getIdToken().getJwtToken()\r\n                    }\r\n                });\r\n                \r\n                cognitoUser.getUserAttributes((err, attributes) => {\r\n                    if (err) {\r\n                        error(err);\r\n                    }\r\n    \r\n                    res(attributes.reduce((profile, item) => {\r\n                        return {...profile, [item.Name]: item.Value}\r\n                    }, {}));\r\n                })\r\n            })\r\n        })\r\n    }\r\n}","export const defaultRegion = 'eu-west-1';\r\nexport const identityPoolId = 'eu-west-1:d6ce9d7b-42e1-40e7-aa10-67e32e0bca38';\r\nexport const userPoolId = `eu-west-1_j54jnd7Px`;\r\nexport const credentialName = `cognito-idp.${defaultRegion}.amazonaws.com/${userPoolId}`;\r\nexport const myBucket = '213774';\r\nexport const apiUrl = 'https://rrdhk1j3ii.execute-api.eu-west-1.amazonaws.com/dev'\r\n\r\nexport const authCfg = {\r\n    userPoolId: userPoolId,\r\n    clientId: 'evmsouskqjs2d1e70mmj2fo3m',\r\n    identityPoolId: identityPoolId,\r\n    credentialName: credentialName\r\n}","import React from 'react';\r\n\r\nconst UserContext = React.createContext({\r\n    isAuth: false,\r\n    toggleAuth: () => {\r\n    }\r\n  })\r\n;\r\n\r\nexport const UserContextProvider = UserContext.Provider;\r\n\r\nexport default UserContext;","import React from 'react';\r\nimport './errorComponent.scss'\r\n\r\nconst ErrorComponent = ({message}) => {\r\n    return <div className=\"invalid-feedback\">{ message }</div>\r\n}\r\n\r\nexport default ErrorComponent","import React, {useState, useContext} from 'react';\r\nimport history from \"../../history\";\r\n\r\n\r\nimport {AuthorizationService} from '../../lib/security/authorization.service';\r\nimport {authCfg, defaultRegion} from '../../env'\r\nimport './login.scss';\r\nimport * as yup from 'yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport UserContext from '../../context/userContext';\r\n\r\nimport ErrorComponent from \"../../components/ErrorComponent/ErrorComponent\";\r\nimport AWS from \"aws-sdk/global\";\r\n\r\nAWS.config.region = defaultRegion;\r\n\r\nconst auth = new AuthorizationService(authCfg, AWS.config);\r\nconst LoginSchema = yup.object().shape({\r\n\temail: yup\r\n\t\t.string()\r\n\t\t.email()\r\n\t\t.required(),\r\n\tpassword: yup.string().min(4, 'Your password should be a minimum of 4 characters'),\r\n});\r\n\r\nconst Login = _ =>{\r\n\tconst {setAuth} = useContext(UserContext);\r\n\tconst [wentWrong, setWentWrong] = useState(null)\r\n\tconst { register, handleSubmit, errors } = useForm({\r\n\t\tvalidationSchema: LoginSchema,\r\n\t});\r\n\tconst submitLogin = handleSubmit(({ email, password }) => {\r\n\t\tconst loginRequest = {\r\n\t\t\tusername: email,\r\n\t\t\tpassword: password\r\n\t\t}\r\n\r\n\t\tauth.login(loginRequest)\r\n\t\t\t.then(result => {auth.refreshSession(); setAuth(true)})\r\n\t\t\t.then(user => { history.push('/dashboard')})\r\n\t\t\t.catch(err => console.log('access deny' + err.message))\r\n\t});\r\n\r\n\tconst onKeyPress = (e) => {\r\n\t\tif(e.which === 13) {\r\n\t\t  submitLogin();\r\n\t\t}\r\n\t\telse return e;\r\n\t  }\r\n\r\n\treturn <div className=\"loginPage\">\r\n\t\t<div className=\"container h-100\">\r\n\t\t\t<div className=\"row h-100 align-items-center justify-content-center\">\r\n\t\t\t\t<div className=\"col-md-8\">\r\n\t\t\t\t\t<div className=\"loginFormWrapper\">\r\n\t\t\t\t\t\t<form onSubmit={submitLogin}>\r\n\t\t\t\t\t\t\t<div className=\"form-group\">\r\n\r\n\t\t\t\t\t\t\t\t<label form={'emailLogin'} >Login</label>\r\n\t\t\t\t\t\t\t\t<input name=\"email\" type=\"email\" ref={register}  id=\"emailLogin\"\r\n\t\t\t\t\t\t\t\t\t\t\t className=\"form-control\" data-testid = \"email\"/>\r\n\t\t\t\t\t\t\t\t{ errors.email &&\r\n\t\t\t\t\t\t\t\t<ErrorComponent  message={ String(errors.email.message) }/>}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t\t\t<label form={'loginPassword'}>Password</label>\r\n\t\t\t\t\t\t\t\t<input name=\"password\" type='password' ref={register} id={'loginPassword'}\r\n\t\t\t\t\t\t\t\t\t\t\t className=\"form-control\" onKeyPress={onKeyPress} data-testid = \"password\"/>\r\n\t\t\t\t\t\t\t\t{ errors.password &&\r\n\t\t\t\t\t\t\t\t<ErrorComponent\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage={ String(errors.password.message) }/> }\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<button type=\"submit\" data-testid = \"submit\" className={'btn btn-primary'} >\r\n\t\t\t\t\t\t\t\tLog In\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t{ wentWrong && <ErrorComponent  message={wentWrong} />}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\t\r\n\t\t\t\r\n};\r\n\r\n\r\nexport default Login;\r\n","import React, {useState} from 'react';\r\nimport AWS from 'aws-sdk/global';\r\nimport history from \"../../history\";\r\n\r\nimport {AuthorizationService} from '../../lib/security/authorization.service';\r\nimport {authCfg, defaultRegion} from '../../env'\r\n\r\n\r\nimport './signup.scss';\r\nimport * as yup from 'yup';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nimport ErrorComponent from \"../../components/ErrorComponent/ErrorComponent\";\r\n\r\nAWS.config.region = defaultRegion;\r\n\r\nconst auth = new AuthorizationService(authCfg, AWS.config);\r\nconst SignupSchema = yup.object().shape({\r\n  email: yup\r\n    .string()\r\n    .email()\r\n    .required(),\r\n  code: yup.string().required(),\r\n});\r\n\r\nconst Confirm = _ =>{\r\n  const [wentWrong, setWentWrong] = useState(null)\r\n  const { register, handleSubmit, errors } = useForm({\r\n    validationSchema: SignupSchema,\r\n  });\r\n  const submitConfirm = handleSubmit(({ email, code }) => {\r\n    const confirmRequest = {\r\n      username: email,\r\n      confirmationCode: code\r\n    }\r\n\r\n    console.log(`User ${confirmRequest.username} is going to be confirmed`);\r\n    auth.confirmAccount(confirmRequest)\r\n      .then(result => {console.log('All is fine, user registered'); history.push('/login')})\r\n      .catch(err => console.log('Sth is not YESS' + err.message))\r\n  });\r\n\r\n  return <div className=\"loginPage\">\r\n    <div className=\"container h-100\">\r\n      <div className=\"row h-100 align-items-center justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n          <div className=\"loginFormWrapper\">\r\n            <form onSubmit={submitConfirm}>\r\n              <div className=\"form-group\">\r\n\r\n                <label form={'email'} >Email</label>\r\n                <input name=\"email\" type=\"email\" ref={register}  id=\"email\"\r\n                       className=\"form-control\" data-testid = \"email\"/>\r\n                { errors.email &&\r\n                <ErrorComponent  message={ String(errors.email.message) }/>}\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label form={'code'}>Code</label>\r\n                <input name=\"code\" type='confirmCodeInput' ref={register} id={'code'}\r\n                       className=\"form-control\"/>\r\n                { errors.code &&\r\n                <ErrorComponent\r\n                  message={ String(errors.code.message) }/> }\r\n              </div>\r\n              <button type=\"submit\" data-testid = \"submit\" className={'btn btn-primary'} >\r\n                Confirm\r\n              </button>\r\n            </form>\r\n            { wentWrong && <ErrorComponent  message={wentWrong} />}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n\r\n\r\n};\r\n\r\n\r\nexport default Confirm;\r\n","import React, { useRef, useState } from 'react';\r\nimport AWS from 'aws-sdk/global';\r\nimport { authCfg, defaultRegion, myBucket, apiUrl } from '../../env'\r\n\r\n\r\nimport './dashboard.scss';\r\n\r\nimport S3 from \"aws-sdk/clients/s3\";\r\nimport { AuthorizationService } from \"../../lib/security/authorization.service\";\r\n\r\nAWS.config.region = defaultRegion;\r\nconst auth = new AuthorizationService(authCfg, AWS.config);\r\n\r\n\r\nconst uploadToS3 = (file) => {\r\n\tconst userId = AWS.config.credentials.identityId;\r\n\tconst params = {\r\n\t\tBody: file,\r\n\t\tBucket: myBucket,\r\n\t\tKey: `uek-krakow/${userId}/photos/${file.name}`\r\n\t}\r\n\r\n\treturn new Promise((res, fail) => {\r\n\t\tconst s3 = new S3();\r\n\t\ts3.putObject(params, (err, data) => {\r\n\t\t\tif (err) {\r\n\t\t\t\tfail(err);\r\n\t\t\t}\r\n\r\n\t\t\tres(params.Key);\r\n\t\t})\r\n\t})\r\n}\r\n\r\nconst getSignedURL = (key) => {\r\n\tconst s3 = new S3();\r\n\tconst params = { Bucket: myBucket, Key: key };\r\n\treturn s3.getSignedUrl('getObject', params);\r\n}\r\n\r\nconst orderAnimation = (photos) => {\r\n\treturn auth.getAccessToken()\r\n\t\t.then(token => {\r\n\t\t\tconsole.log(token);\r\n\t\t\treturn fetch(`${apiUrl}/animations-orders`, {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'Authorization': token\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify({ \"photos\": photos, \"meta1\": \"meta_value\" })\r\n\t\t\t})\r\n\t\t})\r\n}\r\n\r\nconst Confirm = _ => {\r\n\tconst [wentWrong, setWentWrong] = useState(null);\r\n\tconst [fileName, setFileName] = useState('Choose File');\r\n\tconst [files, setFiles] = useState(null);\r\n\tconst fileRef = useRef();\r\n\tconst showFiles = () => {\r\n\t\tconst s3 = new S3();\r\n\t\tconst params = {\r\n\t\t\tBucket: myBucket,\r\n\t\t\tMaxKeys: 100\r\n\t\t}\r\n\r\n\t\ts3.listObjects(params, (err, data) => {\r\n\t\t\tif (err) {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t\tsetWentWrong('something went wrong')\r\n\t\t\t}\r\n\t\t\tsetFiles(data);\r\n\t\t\tconsole.log(data);\r\n\t\t})\r\n\t}\r\n\r\n\tconst uploadFile = () => {\r\n\t\tconst toBeUploadeFiles = [...fileRef.current.files]\r\n\t\ttoBeUploadeFiles.forEach((file, i) => {\r\n\t\t\tuploadToS3(file)\r\n\t\t\t\t.then(res => getSignedURL(res))\r\n\t\t\t\t.catch(err => console.log(err))\r\n\t\t\t\t.finally(() => { fileRef.value = \"\"; setFileName(\"Choose File\") })\r\n\t\t})\r\n\t}\r\n\r\n\tconst orderAnimationFromS = () => {\r\n\t\torderAnimation()\r\n\t\t\t.then(res => {\r\n\t\t\t\tconsole.log('Hurra it works')\r\n\t\t\t\tconsole.log(res)\r\n\t\t\t})\r\n\t\t\t.catch(e => console.log(e))\r\n\t}\r\n\r\n\tconst showFileName = () => {\r\n\t\tfileRef.current.files && fileRef.current.files.length > 0 && setFileName(fileRef.current.files[0].name);\r\n\t}\r\n\r\n\r\n\r\n\r\n\treturn <div className=\"loginPage\">\r\n\t\t<div className=\"container h-100\">\r\n\t\t\t<div className=\"row h-100 align-items-center justify-content-center\">\r\n\t\t\t\t<div className=\"col-md-8\">\r\n\t\t\t\t\t<div className=\"loginFormWrapper\">\r\n\t\t\t\t\t\t<div className=\"file-wrapper\">\r\n\t\t\t\t\t\t\t<button className=\"btn btn-primary\" onClick={showFiles}> Show files from bucket</button>\r\n\t\t\t\t\t\t\t{files && <ul>{files.Contents.map(el => <li>{el.Key}</li>)}</ul>}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"input-group mb-3\">\r\n\t\t\t\t\t\t\t<div className=\"input-group-prepend\" onClick={uploadFile}>\r\n\t\t\t\t\t\t\t\t<span className=\"input-group-text\">Upload</span>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"custom-file\">\r\n\t\t\t\t\t\t\t\t<input type=\"file\" className=\"custom-file-input\" id=\"inputGroupFile01\" onChange={showFileName} ref={fileRef} />\r\n\t\t\t\t\t\t\t\t<label className=\"custom-file-label\" htmlFor=\"inputGroupFile01\">\r\n\t\t\t\t\t\t\t\t\t{fileName}\r\n\t\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className=\"orderAnimation\">\r\n\t\t\t\t\t\t\t<button className=\"btn btn-primary\" onClick={orderAnimationFromS}>Order Animation</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n\r\n};\r\n\r\n\r\nexport default Confirm;\r\n","import React, {useContext} from 'react';\r\nimport { Redirect, Route} from 'react-router';\r\nimport { useEffect } from 'react';\r\nimport history from '../../history';\r\nimport UserContext from \"../../context/userContext\";\r\n\r\n\r\n\r\nexport const PrivateRoute = props => {\r\n\tconst {isAuth} = useContext(UserContext);\r\n\tlet redirectPath = '';\r\n\tuseEffect(()=>{\r\n\t\tif(!isAuth){\r\n\t\t\thistory.push('/login');\r\n\t\t}\r\n\t}, [isAuth]);\r\n\r\n\tif (redirectPath) {\r\n\t\tconst renderComponent = () => <Redirect to={{ pathname: redirectPath }} />;\r\n\t\treturn <Route {...props} component={renderComponent} render={undefined} />;\r\n\t} else {\r\n\t\treturn <Route {...props} />;\r\n\t}\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import React from \"react\";\r\n\r\nconst NotFound = () => <h3>404</h3>\r\n\r\nexport default NotFound;\r\n","import React, {useState} from 'react';\r\nimport AWS from 'aws-sdk/global';\r\nimport history from \"../../history\";\r\n\r\nimport {AuthorizationService} from '../../lib/security/authorization.service';\r\nimport {authCfg, defaultRegion} from '../../env'\r\n\r\n\r\nimport './signup.scss';\r\nimport * as yup from 'yup';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nimport ErrorComponent from \"../../components/ErrorComponent/ErrorComponent\";\r\n\r\nAWS.config.region = defaultRegion;\r\n\r\nconst auth = new AuthorizationService(authCfg, AWS.config);\r\nconst SignupSchema = yup.object().shape({\r\n  email: yup\r\n    .string()\r\n    .email()\r\n    .required(),\r\n  fullName: yup.string().required(),\r\n  password: yup.string().min(4, 'Your password should be a minimum of 4 characters')\r\n});\r\n\r\nconst SignUp = _ =>{\r\n  const [wentWrong, setWentWrong] = useState(null)\r\n  const { register, handleSubmit, errors } = useForm({\r\n    validationSchema: SignupSchema,\r\n  });\r\n  const submitSignUp = handleSubmit(({ email, password, fullName }) => {\r\n    const registerRequest = {\r\n      email: email,\r\n      password: password,\r\n      fullName: fullName\r\n    }\r\n    auth.registerUser(registerRequest)\r\n      .then(result => { console.log('All is fine, user registered'); history.push('/confirm')} )\r\n      .catch(err => { console.log('Sth is not YESS' + err.message); setWentWrong('something wnet wrong')})\r\n  });\r\n\r\n  return <div className=\"loginPage\">\r\n    <div className=\"container h-100\">\r\n      <div className=\"row h-100 align-items-center justify-content-center\">\r\n        <div className=\"col-md-8\">\r\n          <div className=\"loginFormWrapper\">\r\n            <form onSubmit={submitSignUp}>\r\n              <div className=\"form-group\">\r\n\r\n                <label form={'email'} >Login</label>\r\n                <input name=\"email\" type=\"email\" ref={register}  id=\"email\"\r\n                       className=\"form-control\" data-testid = \"email\"/>\r\n                { errors.email &&\r\n                <ErrorComponent  message={ String(errors.email.message) }/>}\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label form={'password'}>Password</label>\r\n                <input name=\"password\" type='password' ref={register} id={'password'}\r\n                       className=\"form-control\"  data-testid = \"password\"/>\r\n                { errors.password &&\r\n                <ErrorComponent\r\n                  message={ String(errors.password.message) }/> }\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label form={'fullName'}>Full Name</label>\r\n                <input name=\"fullName\" type='fullName' ref={register} id={'fullName'}\r\n                       className=\"form-control\"  data-testid = \"fullName\"/>\r\n                { errors.fullName &&\r\n                <ErrorComponent\r\n                  message={ String(errors.password.message) }/> }\r\n              </div>\r\n              <button type=\"submit\" data-testid = \"submit\" className={'btn btn-primary'} >\r\n                Register\r\n              </button>\r\n            </form>\r\n            { wentWrong && <ErrorComponent  message={wentWrong} />}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n\r\n\r\n};\r\n\r\n\r\nexport default SignUp;\r\n","import React, {useEffect, useState} from 'react';\r\nimport { Switch, Route } from 'react-router';\r\nimport Login from './pages/login/login';\r\nimport Confirm from \"./pages/confirm/Confirm\";\r\nimport Dashboard from \"./pages/dashboard/dashboard\";\r\nimport PrivateRoute from './components/router/privateRoute';\r\nimport NotFound from './pages/404';\r\nimport './App.scss';\r\nimport AWS from 'aws-sdk/global';\r\n\r\nimport {AuthorizationService} from './lib/security/authorization.service';\r\nimport {authCfg, defaultRegion} from './env'\r\n\r\nimport { UserContextProvider } from './context/userContext';\r\nimport SignUp from \"./pages/signup/SignUp\";\r\n\r\nAWS.config.region = defaultRegion;\r\n\r\nconst auth = new AuthorizationService(authCfg, AWS.config);\r\n\r\nconst App = _ => {\r\n  const [isAuth, setAuthorization] = useState(false);\r\n  const setAuth = (auth) => {\r\n    setAuthorization(auth)\r\n  }\r\n  useEffect(() => {\r\n      auth.refreshSession()\r\n        .then(user => {setAuthorization(true)})\r\n        .catch()\r\n\r\n  }, [])\r\n  return <UserContextProvider value={{\r\n    isAuth,\r\n    setAuth\r\n  }}>\r\n    <Switch>\r\n      <Route path='/login' component={Login} />\r\n      <Route path='/signup' component={SignUp} />\r\n      <Route path='/confirm' component={Confirm} />\r\n      <PrivateRoute\r\n        path='/dashboard'\r\n        component={Dashboard}\r\n      />\r\n      <Route component={NotFound}/>\r\n    </Switch>\r\n  </UserContextProvider>;\r\n\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {Router} from  'react-router-dom'\r\nimport history from \"./history\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router history={history}>\r\n      <App  />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}